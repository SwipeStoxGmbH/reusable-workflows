name: "Build and Push"

on:
  workflow_call:

    inputs:
      SLACK_BUILD_CHANNEL_ID:
        type: string
        required: true
        description: '#gh-build - ID'
      SLACK_BUILD_MESSAGE_ID:
        type: string
        required: true
        description: '#gh-build - Message ID'
      ECR_REPO:
        type: string
        required: true
        description: 'Elastic Container Repository of the service'
      ECR_CACHE_REPO:
        type: string
        required: true
        description: 'Caching Elastic Container Repository of the service'
      SCALA_IMAGE:
        type: string
        required: true
        description: 'Scala image'
      SCALA_VERSION:
        type: string
        required: true
        description: 'Version of the scala image'
    secrets:
      slack-bot-token:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-region:
        required: true
        
jobs:
  clean_assembly:
    runs-on: small-runner
    steps:
      - name: Notify Slack of clean and assembly
        id: gh-build
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: Building artifact
          color: warning
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}


  social_build:
    runs-on: small-runner
    needs: [clean_assembly]
    outputs:
      TAG: ${{ env.TAG }}
    steps:
      - name: Set environment variables
        run: |
          echo "SHORT_COMMIT=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF##*/}-`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

      - name: Notify Slack of Build
        id: gh-build
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: Starting image ${{ env.TAG }} build
          color: 0037FF
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}

      - name: Checkout
        uses: actions/checkout@v1
 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ secrets.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install AWS cli
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@master

      - name: ECR repo setup
        uses: SwipeStoxGmbH/reusable-workflows/actions/ecr-setup@master
        with:
          ECR_REPO: ${{ inputs.ECR_REPO }}

      # Moved from composite action because of the folder context issues
      # - name: Clean and Assembly 
      #   uses: SwipeStoxGmbH/reusable-workflows/actions/clean-assembly@master
      #   with:
      #     SCALA_IMAGE: ${{ inputs.SCALA_IMAGE }}
      #     SCALA_VERSION: ${{ inputs.SCALA_VERSION }}
      #     aws-access-key-id: ${{ secrets.aws-access-key-id }}
      #     aws-secret-access-key: ${{ secrets.aws-secret-access-key }}


      - name: Clean and Assembly 
        shell: bash
        run: |
          docker pull ${{ inputs.SCALA_IMAGE }}:${{ inputs.SCALA_VERSION }}
          docker run --rm -i \
          -e AWS_ACCESS_KEY_ID=${{ secrets.aws-access-key-id }} \
          -e AWS_SECRET_ACCESS_KEY=${{ secrets.aws-secret-access-key }} \
          -e AWS_REGION=us-east-1 \
          -u root \
          -v /runner/_work/swipestox-activity-feed-api/swipestox-activity-feed-api:/opt/tmp \
          -v /runner/_work/swipestox-activity-feed-api/target:/root/target \
          ${{ inputs.SCALA_IMAGE }}:${{ inputs.SCALA_VERSION }} \
          bash -c "rm -rf /root/project | cp -R /opt/tmp/. /root/ | /root/sbt/bin/sbt clean assembly"

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          endpoint: builders

      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          # caching to ECR seems not supported yet
          # cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_CACHE_REPO }}:buildcache
          # cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_CACHE_REPO }}:buildcache,mode=max
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPO }}:${{ env.TAG }}

  slack_report_success:
    runs-on: small-runner
    needs: [social_build]
    if: success()
    steps: 
      - name: Notify Slack of Success
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: Image ${{ needs.social_build.outputs.TAG }} build completed
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }} 

  slack_report_fail:
    runs-on: small-runner
    needs: [social_build]
    if: failure()
    steps: 
      - name: Notify Slack of Failure
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: Image ${{ needs.social_build.outputs.TAG }} build failed
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }} 
