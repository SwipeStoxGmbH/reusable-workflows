name: 'NGINX conf test'

on:
  workflow_call:

    inputs:
      SLACK_BUILD_CHANNEL_ID:
        type: string
        required: true
        description: '#gh-build - ID'
      SLACK_BUILD_MESSAGE_ID:
        type: string
        required: true
        description: '#gh-build - Message ID'
      KUSTOMIZE_ROOT:
        type: string
        required: true
        description: 'Path to Kustomize base'
      KUSTOMIZE_OVERLAY:
        type: string
        required: true
        description: 'Path to Kustomize base'
      NGINX_IMAGE:
        type: string
        required: true
        description: 'NGINX Image'
      NGINX_CONFIG_FILES_PATH:
        type: string
        required: true
        description: 'NGINX Image'
      NGINX_CONFIG_FILES_EXPORT:
        type: string
        required: true
        description: 'NGINX Image'
    secrets:
      slack-bot-token:
        required: true


jobs:
  nginx_test:
    runs-on: small-runner
    steps:
    - name: Notify Slack of Test
      id: gh-build
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
        message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
        status: Testing NGINX Config
        color: B14736
      env:
        SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}

    - name: Checkout
      uses: actions/checkout@v1

    - name: Create Config Files
      shell:  bash {0}
      run: |
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod a+x /usr/local/bin/yq

        NGINX_CONFIG_FILE_PATH_ARRAY=${{ inputs.NGINX_CONFIG_FILES_PATH }}
        NGINX_CONFIG_FILE_EXPORT_ARRAY=${{ inputs.NGINX_CONFIG_FILES_EXPORT }}

        for i in "${!NGINX_CONFIG_FILE_PATH_ARRAY[@]}"; do
          yq -e '.data."nginx.conf"' "%s > %s\n" "${NGINX_CONFIG_FILE_PATH_ARRAY[i]}" "${NGINX_CONFIG_FILE_EXPORT_ARRAY[i]}"
        done

    - name: Running Tests
      shell:  bash {0}
      run: |
        result_dev=$(docker run --rm -t -a stdout --name dev-nginx-test --mount type=bind,source="$(pwd)"/dev-nginx.conf,target=/usr/local/openresty/nginx/conf/nginx.conf,readonly ${{ inputs.NGINX_IMAGE }} nginx -c /usr/local/openresty/nginx/conf/nginx.conf -t)
        result_dev_canary=$(docker run --rm -t -a stdout --name dev-canary-nginx-test --mount type=bind,source="$(pwd)"/dev-canary-nginx.conf,target=/usr/local/openresty/nginx/conf/nginx.conf,readonly ${{ inputs.NGINX_IMAGE }} nginx -c /usr/local/openresty/nginx/conf/nginx.conf -t)
        result_prod=$(docker run --rm -t -a stdout --name prod-nginx-test --mount type=bind,source="$(pwd)"/production-nginx.conf,target=/usr/local/openresty/nginx/conf/nginx.conf,readonly ${{ inputs.NGINX_IMAGE }} nginx -c /usr/local/openresty/nginx/conf/nginx.conf -t)
        result_prod_canary=$(docker run --rm -t -a stdout --name prod-canary-nginx-test --mount type=bind,source="$(pwd)"/production-canary-nginx.conf,target=/usr/local/openresty/nginx/conf/nginx.conf,readonly ${{ inputs.NGINX_IMAGE }} nginx -c /usr/local/openresty/nginx/conf/nginx.conf -t)
        result_prod_webinar=$(docker run --rm -t -a stdout --name prod-webinar-nginx-test --mount type=bind,source="$(pwd)"/production-webinar-nginx.conf,target=/usr/local/openresty/nginx/conf/nginx.conf,readonly ${{ inputs.NGINX_IMAGE }} nginx -c /usr/local/openresty/nginx/conf/nginx.conf -t)

        # Look for the word successful and count the lines that have it
        successful_dev=$(echo $result_dev | grep successful | wc -l)
        successful_dev_canary=$(echo $result_dev_canary | grep successful | wc -l)
        successful_prod=$(echo $result_prod | grep successful | wc -l)
        successful_prod_canary=$(echo $result_prod_canary | grep successful | wc -l)
        successful_prod_webinar=$(echo $result_prod_webinar | grep successful | wc -l)

        if [ $successful_dev = 0 ]; then
          echo FAILED
          echo "$result_dev"
          exit 1
        elif [ $successful_dev_canary = 0 ]; then
          echo FAILED
          echo "result_dev_canary"
          exit 1
        elif [ $successful_prod = 0 ]; then
          echo FAILED
          echo "$result_prod"
          exit 1
        elif [ $successful_prod_canary = 0 ]; then
          echo FAILED
          echo "$result_prod_canary"
          exit 1
        elif [ $successful_prod_webinar = 0 ]; then
          echo FAILED
          echo "$result_prod_webinar"
          exit 1
        else
          echo SUCCESS
        fi

  report_success:
    runs-on: small-runner
    needs: [nginx_test]
    if: success()
    steps: 
      - name: Notify Slack of Success
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: NGINX test passed
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}

  report_fail:
    runs-on: small-runner
    needs: [nginx_test]
    if: failure()
    steps: 
      - name: Notify Slack of Failure
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: NGINX test failed
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}
