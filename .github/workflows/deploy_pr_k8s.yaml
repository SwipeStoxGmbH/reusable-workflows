name: "Deploy to dev k8s"

on:
  workflow_call:

    inputs:
      SLACK_DEV_DEPLOY_CHANNEL_ID:
        type: string
        required: true
        description: '#gh-deploy-dev ID'
      NAMESPACE:
        type: string
        required: true
        description: 'Namespace in the cluster'
      KUSTOMIZE_OVERLAY:
        type: string
        required: true
        description: 'Path to Kustomize overlay'
      KUSTOMIZE_BASE:
        type: string
        required: true
        description: 'Path to Kustomize base'
      HOSTED_ZONE_ID_INT:
        type: string
        required: true
        description: 'R53 Hosted Zone ID'
      DOMAIN_INT:
        type: string
        required: true
        description: 'internal dev domain'
      INT_SXDEVIO_ELB:
        type: string
        required: true
        description: 'internal dev elb'
    secrets:
      slack-bot-token:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-region:
        required: true

jobs:
  deploy_pr:
    runs-on: small-runner
    outputs:
      SLACK_MESSAGE_ID: ${{ steps.gh-deploy-dev.outputs.message_id }}
      PR_TAG: ${{ env.PR_TAG }}
    steps:
      - name: Set environment variables
        id: envs
        run: |
          PR_TAG=pr-`echo ${{ github.event.pull_request.head.sha }} | cut -c1-7`
          echo "PR_TAG=pr-`echo ${{ github.event.pull_request.head.sha }} | cut -c1-7`" >> $GITHUB_ENV
      
      # - name: Install envsubst 
      #   run: |
      #     sudo apt-get update -y
      #     sudo apt-get install gettext -y
      #     envsubst

      # - name: Install AWS cli
      #   id: install-aws-cli
      #   uses: unfor19/install-aws-cli-action@master

      - name: Notify Slack of Deploy
        id: gh-deploy-dev
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_DEV_DEPLOY_CHANNEL_ID }}
          status: Deploying ${{ env.TAG }} on Dev
          color: 0037FF
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Inject image tag into files
        run: |
          sudo apt-get update -y
          sudo apt-get install gettext -y
          FILES=(${{ inputs.KUSTOMIZE_BASE }}/base/* ${{ inputs.KUSTOMIZE_BASE }}/overlays/dev/*)
          for FILE in ${FILES[@]}; do
            if [[ -n ${PATTERN} ]] ; then
              envsubst "${PATTERN}" < $FILE > /tmp/envsubst || exit 1
            else
              envsubst < $FILE > /tmp/envsubst || exit 1
            fi
            mv /tmp/envsubst $FILE || exit 1
          done
        env:
          PATTERN: $PR_TAG 

      - name: Deploy PR
        run: |
          echo "Setting up KUBECTL"
          curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          echo "Installing Kustomize"
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          chmod +x ./kustomize
          sudo mv ./kustomize /usr/local/bin/
          echo "Deploying"
          cd ${{ inputs.KUSTOMIZE_OVERLAY }} && kustomize build . | kubectl apply -n ${{ inputs.NAMESPACE }} -f -

      - name: "Create PR DNS Record "
        uses: Roosterfish/aws-route53-record-set-action@master
        with: 
          aws_access_key_id: ${{ secrets.aws-access-key-id }}
          aws_secret_access_key: ${{ secrets.aws-secret-access-key }}
          aws_route53_hosted_zone_id: ${{ inputs.HOSTED_ZONE_ID_INT }}
          aws_route53_rr_action: "CREATE"
          aws_route53_rr_name: "${PR_TAG}"
          aws_route53_rr_type: "CNAME"
          aws_route53_rr_ttl: "300"
          aws_route53_rr_value: "${{ inputs.INT_SXDEVIO_ELB }}"
        env:
          PR_TAG: ${{ env.PR_TAG }}

      - name: Invalidate CloudFront
        uses: chetan/invalidate-cloudfront-action@v2
        if: ${{ inputs.CF_DISTRIBUTION_ID != '' &&  inputs.CF_INVALIDATION_PATHS != '' }}
        env:
          DISTRIBUTION: ${{ inputs.CF_DISTRIBUTION_ID }}
          PATHS: ${{ inputs.CF_INVALIDATION_PATHS }}
          AWS_REGION: "us-east-1"
          AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-secret-access-key }}

  slack_report_success:
    runs-on: small-runner
    needs: [deploy_pr]
    if: success()
    steps: 
      - name: Notify Slack of Success
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_DEV_DEPLOY_CHANNEL_ID }}
          message_id: ${{ needs.deploy_pr.outputs.SLACK_MESSAGE_ID }}
          status: PR deployed on https://${{ needs.deploy_pr.outputs.TAG }}.${{ inputs.DOMAIN_INT }}  
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }} 

  slack_report_fail:
    runs-on: small-runner
    needs: [deploy_pr]
    if: failure()
    steps: 
      - name: Notify Slack of Failure
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_DEV_DEPLOY_CHANNEL_ID }}
          message_id: ${{ needs.deploy_pr.outputs.SLACK_MESSAGE_ID }}
          status: ${{ needs.deploy_pr.outputs.TAG }} PR Deployment Failed
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }} 