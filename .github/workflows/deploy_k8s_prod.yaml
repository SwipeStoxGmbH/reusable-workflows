name: "Deploy to production k8s"

on:
  workflow_call:

    inputs:
      SLACK_BOT_TOKEN:
        type: string
        required: true
        description: 'Token for Slack-bot'
      SLACK_PROD_DEPLOY_CHANNEL_ID:
        type: string
        required: true
        description: '#gh-deploy-prod ID'
      NAMESPACE:
        type: string
        required: true
        description: 'Namespace in the cluster'
      KUSTOMIZE_OVERLAY:
        type: string
        required: true
        description: 'Path to Kustomize overlay'
      IMAGE_TAG:
        type: string
        required: true
        description: 'Image tag to deploy'
      CF_DISTRIBUTION_ID:
        type: string
        required: true
        description: 'CloudFront distribution ID'
      CF_INVALIDATION_PATHS:
        type: string
        required: true
        description: 'CloudFront invalidations paths'
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-region:
        required: true
      gh-token:
        required: true

jobs:  
  deploy_production:
    runs-on: small-prod-runner
    outputs:
      SLACK_MESSAGE_ID: ${{ steps.gh-deploy-prod.outputs.message_id }}
    steps:
      - name: Set environment variables
        run: |
          echo "TAG=${{ inputs.IMAGE_TAG }}" >> $GITHUB_ENV
      
      - name: Install envsubst 
        run: |
          sudo apt-get update -y
          sudo apt-get install gettext -y

      - name: Notify Slack of Production Deploy
        id: gh-deploy-prod
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_PROD_DEPLOY_CHANNEL_ID }}
          status: Deploying ${{ inputs.IMAGE_TAG }} on Production
          color: 0037FF
        env:
          SLACK_BOT_TOKEN: ${{ inputs.SLACK_BOT_TOKEN }} 

      - name: Checkout
        uses: actions/checkout@v1

      - name: Inject image tag into files
        uses: SwipeStoxGmbH/reusable-workflows/actions/envsubst@master
        with:
          patterns: $TAG
        env:
          TAG: ${{ env.TAG }}
          
      - name: Deploy
        uses: SwipeStoxGmbH/reusable-workflows/actions/deploy@master
        with:
          NAMESPACE: ${{ inputs.NAMESPACE }}
          KUSTOMIZE_OVERLAY: ${{ inputs.KUSTOMIZE_OVERLAY }}

      - name: Invalidate CloudFront
        uses: chetan/invalidate-cloudfront-action@v2
        if: ${{ inputs.CF_DISTRIBUTION_ID != '' &&  inputs.CF_INVALIDATION_PATHS != '' }}
        env:
          DISTRIBUTION: ${{ inputs.CF_DISTRIBUTION_ID }}
          PATHS: ${{ inputs.CF_INVALIDATION_PATHS }}
          AWS_REGION: "us-east-1"
          AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-secret-access-key }}

  slack_report_success:
    runs-on: small-runner
    needs: [deploy_production]
    if: success()
    steps: 
      - name: Notify Slack of Success
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_PROD_DEPLOY_CHANNEL_ID }}
          message_id: ${{ needs.deploy_production.outputs.slack_message_id }}
          status: ${{ inputs.IMAGE_TAG }} Production Deployment Completed
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ inputs.SLACK_BOT_TOKEN }} 

  slack_report_fail:
    runs-on: small-runner
    needs: [deploy_production]
    if: failure()
    steps: 
      - name: Notify Slack of Failure
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_PROD_DEPLOY_CHANNEL_ID }}
          message_id: ${{ needs.deploy_production.outputs.slack_message_id }}
          status: ${{ inputs.IMAGE_TAG }} Production Deployment Failed
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ inputs.SLACK_BOT_TOKEN }} 


