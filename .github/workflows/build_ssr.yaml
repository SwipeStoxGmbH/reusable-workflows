name: "Build and Push"

on:
  workflow_call:

    inputs:
      SLACK_BOT_TOKEN:
        required: true
        description: 'Token for Slack-bot'
      SLACK_CHANNEL_ID:
        required: true
        description: 'ID of the Slack channel'
      ECR_REPO:
        required: true
        description: 'Elastic Container Repository of the service'
      ECR_CACHE_REPO:
        required: true
        description: 'Caching Elastic Container Repository of the service'

jobs:
  build:
    runs-on: small-runner
    steps:
      - name: Notify Slack of Build
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ env.SLACK_CHANNEL_ID }}
          message_id: ${{ needs.slack_report_start.outputs.slack_message_id }}
          status: Running ${{ github.job }} - Build ...
          color: 00FFFF
        env:
          SLACK_BOT_TOKEN: ${{ env.SLACK_BOT_TOKEN }} 

      - name: Checkout
        uses: actions/checkout@v1

      - name: Set environment variables
        run: |
          echo "SHORT_COMMIT=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF##*/}-`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_EU_WEST_1 }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install AWS cli
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@master

      - name: ECR repo setup 
        run: |
          aws ecr describe-repositories --repository-names ${ECR_REPO} || $(aws ecr create-repository --repository-name ${ECR_REPO} && aws s3 cp --recursive s3://sxdev-devops/policies/ecr/ . && aws ecr set-repository-policy --repository-name ${ECR_REPO} --policy-text file://ecr_policy.json && aws ecr put-lifecycle-policy --repository-name ${ECR_REPO} --lifecycle-policy-text file://ecr_lifecycle_policy.json)
        shell: bash

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          endpoint: builders

      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          # caching to ECR seems not supported yet
          # cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_CACHE_REPO }}:buildcache
          # cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_CACHE_REPO }}:buildcache,mode=max
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.TAG }}
    outputs:
      TAG: ${{ env.TAG }}

  slack_report_success:
    runs-on: small-runner
    needs: [slack_report_start, build]
    if: success()

    steps: 
      - name: Notify Slack of Success
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ env.SLACK_CHANNEL_ID }}
          message_id: ${{ needs.slack_report_start.outputs.slack_message_id }}
          status: Success
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ env.SLACK_BOT_TOKEN }} 

  slack_report_fail:
    runs-on: small-runner
    needs: [slack_report_start, build]
    if: failure()

    steps: 
      - name: Notify Slack of Failure
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ env.SLACK_CHANNEL_ID }}
          message_id: ${{ needs.slack_report_start.outputs.slack_message_id }}
          status: Failure
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ env.SLACK_BOT_TOKEN }} 
