name: "Build and Push"

on:
  workflow_call:

    inputs:
      SLACK_BUILD_CHANNEL_ID:
        type: string
        required: true
        description: '#gh-build - ID'
      SLACK_BUILD_MESSAGE_ID:
        type: string
        required: true
        description: '#gh-build - Message ID'
      ECR_REPO:
        type: string
        required: true
        description: 'Elastic Container Repository of the service'
      ECR_CACHE_REPO:
        type: string
        required: true
        description: 'Caching Elastic Container Repository of the service'
      ELASTIC_INDEX:
        type: string
        required: false
        description: 'Elasticsearch Index'
        default: 'ci-cd'
    secrets:
      slack-bot-token:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-region:
        required: true
        
jobs:
  default_build:
    runs-on: small-runner
    outputs:
      TAG: ${{ env.TAG }}
      GITHUB_ACTOR: ${{ env.GITHUB_ACTOR }}

    steps:
      - name: Set environment variables
        run: |
          echo "SHORT_COMMIT=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF##*/}-`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
          echo "GITHUB_ACTOR=${GITHUB_ACTOR}" >> $GITHUB_ENV
          echo "12:23:11" | awk '{split($0,a,":"); print a[3] a[2] a[1]}'

      - name: Notify Slack of Build
        id: gh-build
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: |
            Starting Image Build

            - Image Tag: ${{ env.TAG }}
            - Actor: ${{ env.GITHUB_ACTOR }}
            - Job URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          color: 0037FF
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}

      - name: Checkout
        uses: actions/checkout@v1
 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ secrets.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install AWS cli
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@master

      - name: ECR repo setup
        uses: SwipeStoxGmbH/reusable-workflows/actions/ecr-setup@master
        with:
          ECR_REPO: ${{ inputs.ECR_REPO }}

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          endpoint: builders

      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          # caching to ECR seems not supported yet
          # cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_CACHE_REPO }}:buildcache
          # cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_CACHE_REPO }}:buildcache,mode=max
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPO }}:${{ env.TAG }}

  upload-logs-to-elastic:
    runs-on: small-runner
    needs: default_build
    if: always()
    steps:
    - name: Upload GitHub Action workflows logs to elastic
      uses: shahargl/upload-github-workflow-logs-to-elastic@1.0.13
      with:
        github_token: "${{ secrets.GH_TOKEN_REPO_FULL }}"
        github_org: "${{ github.repository_owner }}"
        github_repository: "${{ github.event.repository.name }}."
        github_run_id: "${{ github.run_id }}"
        elastic_host: "${{ secrets.DEV_ELASTIC_HOST }}"
        elastic_api_key_id: "${{ secrets.DEV_ELASTIC_KEY_ID }}"
        elastic_api_key: "${{ secrets.DEV_ELASTIC_API_KEY }}"
        elastic_index: "${{ inputs.ELASTIC_INDEX }}"

  slack_report_success:
    runs-on: small-runner
    needs: [default_build]
    if: success()
    steps: 
      - name: Notify Slack of Success
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: |
            Image Build Completed

            - Image Tag: ${{ needs.default_build.outputs.TAG }}
            - Actor: ${{ needs.default_build.outputs.GITHUB_ACTOR }}
            - Job URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }} 

  slack_report_fail:
    runs-on: small-runner
    needs: [default_build]
    if: failure()
    steps: 
      - name: Notify Slack of Failure
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: |
            Image Build Failed 

            - Image Tag: ${{ needs.default_build.outputs.TAG }}
            - Actor: ${{ needs.default_build.outputs.GITHUB_ACTOR }}
            - Job URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }} 
